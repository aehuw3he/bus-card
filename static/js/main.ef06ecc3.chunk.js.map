{"version":3,"sources":["component/BusList/logo.png","component/Bus/Bus.js","component/BusList/BusList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Bus","busObj","this","props","EstimateTime","StopName","StopSequence","className","Zh_tw","Component","BusList","busData","seconds","handleSearchText","getBusDetail","busDataIndexOfOne","Object","assign","RouteNameIndexOfOne","RouteName","outboundBus","filter","bus","Direction","sort","a","b","inboundBus","href","LogoPTX","src","alt","height","type","placeholder","onChange","style","marginLeft","value","onClick","map","index","key","isSearching","reserveBusData","filterText","filterBusObj","App","e","target","state","setState","obj","includes","url","fetch","then","response","json","myJson","bind","setInterval","countDown","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef06ecc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2260b52a.png\";","import React, { Component } from \"react\";\r\nimport \"./Bus.scss\";\r\n\r\nexport default class Bus extends Component {\r\n  render() {\r\n    const { busObj } = this.props;\r\n    const {\r\n      EstimateTime,\r\n      StopName,\r\n      StopSequence\r\n    } = busObj;\r\n    return (\r\n      <div\r\n        className={`card-container ${EstimateTime / 60 < 3 ? \"active\" : null}`}\r\n      >\r\n        <div className=\"bus-info\">\r\n          {/* <h1>{\"公車路線: \" + RouteName.Zh_tw}</h1> */}\r\n          <h1>{\"站名 : \" + StopName.Zh_tw}</h1>\r\n          <h1>{\"預估到達 : \" + EstimateTime / 60 + \" 分鐘\"}</h1>\r\n          <h1>{\"站牌順序 \" + StopSequence}</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Bus from \"../Bus/Bus\";\r\nimport \"./BusList.scss\";\r\nimport LogoPTX from \"./logo.png\";\r\nexport default class BusList extends Component {\r\n  render() {\r\n    const { busData, seconds, handleSearchText, getBusDetail } = this.props;\r\n    // 取出公車路線名稱\r\n    // console.log(busData)\r\n    // const JSON_string = busData[0];\r\n    // const a =JSON.stringify(JSON_string)\r\n    // console.log(a);\r\n    // const b = {\"PlateNumb\":\"729-U8\",\"StopUID\":\"TXG10564\",\"StopID\":\"10564\",\"StopName\":{\"Zh_tw\":\"逢甲橋\",\"En\":\"Fengjia Bridge\"},\"RouteUID\":\"TXG51\",\"RouteID\":\"51\",\"RouteName\":{\"Zh_tw\":\"51\",\"En\":\"51\"},\"SubRouteUID\":\"TXG51\",\"SubRouteID\":\"51\",\"SubRouteName\":{\"Zh_tw\":\"51\",\"En\":\"51\"},\"Direction\":0,\"EstimateTime\":540,\"StopSequence\":60,\"StopStatus\":0,\"MessageType\":0,\"NextBusTime\":\"2019-11-06T11:24:00+08:00\",\"Estimates\":[{\"PlateNumb\":\"729-U8\",\"EstimateTime\":540,\"IsLastBus\":false},{\"PlateNumb\":\"756-U8\",\"EstimateTime\":1680,\"IsLastBus\":false},{\"PlateNumb\":\"739-U8\",\"EstimateTime\":2640,\"IsLastBus\":false}],\"SrcUpdateTime\":\"2019-11-06T10:17:58+08:00\",\"UpdateTime\":\"2019-11-06T10:18:25+08:00\"}\r\n    // const obj3 = JSON.parse(b)\r\n    // var obj2 = JSON.parse(JSON.stringify(busData));\r\n    // console.log(obj2[0]);\r\n\r\n    // console.log(busDataObj)\r\n    const busDataIndexOfOne = Object.assign({}, busData[0]);\r\n    const RouteNameIndexOfOne = Object.assign({}, busDataIndexOfOne.RouteName);\r\n    // console.log(RouteNameIndexOfOne.Zh_tw);\r\n    // 把去程的公車過濾出來，並進行排序\r\n    const outboundBus = busData.filter(bus => bus.Direction !== 1);\r\n    outboundBus.sort((a, b) => (a.StopSequence > b.StopSequence ? 1 : -1));\r\n\r\n    // 把返程的公車過濾出來，並進行排序\r\n    const inboundBus = busData.filter(bus => bus.Direction !== 0);\r\n    inboundBus.sort((a, b) => (a.StopSequence > b.StopSequence ? 1 : -1));\r\n    // console.log(inboundBus);\r\n    // console.log(outboundBus)\r\n    return (\r\n      <>\r\n        <form className=\"nav-container\">\r\n          <h1 className=\"font-titile\">\r\n            公車路線: {RouteNameIndexOfOne.Zh_tw}{\" \"}\r\n          </h1>\r\n          <div className=\"logo-copyright\">\r\n            <h1>\r\n              資料介接「交通部PTX平臺」&平臺標章{\" \"}\r\n              <a href={LogoPTX}>【Logo下載】</a>\r\n            </h1>\r\n            <img src={LogoPTX} alt=\"\" height=\"50\" />\r\n          </div>\r\n          <div className=\"interact-box\">\r\n            <input\r\n              className=\"stopname\"\r\n              type=\"text\"\r\n              placeholder=\"請輸入站牌名稱進行過濾\"\r\n              onChange={handleSearchText}\r\n            />\r\n            <div className=\"time-update\">\r\n              <h1>{seconds}秒後更新</h1>\r\n              <input\r\n                style={{ marginLeft: 20 }}\r\n                type=\"button\"\r\n                value=\"立刻更新\"\r\n                onClick={getBusDetail}\r\n              />\r\n            </div>\r\n            <div className=\"annotation\">\r\n              <div className=\"notice\"></div>\r\n              <h3 className=\"font-notice\">紅色代表公車即將抵達</h3>\r\n            </div>\r\n          </div>\r\n        </form>\r\n        <h1 className=\"font-go-back\">去程</h1>\r\n        <section className=\"bus-outbound\">\r\n          {outboundBus.map((busObj, index) => {\r\n            return <Bus key={index} busObj={busObj} />;\r\n          })}\r\n        </section>\r\n        <h1 className=\"font-go-back\">回程</h1>\r\n        <section className=\"bus-inbound\">\r\n          {inboundBus.map((busObj, index) => {\r\n            return <Bus key={index} busObj={busObj} />;\r\n          })}\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport BusList from \"./component/BusList/BusList\";\r\n\r\nlet isSearching = false;\r\nlet reserveBusData = [];\r\nlet filterText = \"\";\r\nlet filterBusObj = {};\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      seconds: 5,\r\n      busData: [],\r\n      url:\r\n        \"https://ptx.transportdata.tw/MOTC/v2/Bus/EstimatedTimeOfArrival/City/Taichung/51?$filter=SubRouteUID%20eq%20'TXG51'&$format=JSON\"\r\n        // \"./51.json\"\r\n    };\r\n  }\r\n  countDown() {\r\n    if (this.state.seconds === 0) {\r\n      this.getBusDetail();\r\n      this.setState({\r\n        seconds: 5\r\n      });\r\n    } else {\r\n      this.setState({\r\n        seconds: this.state.seconds - 1\r\n      });\r\n    }\r\n  }\r\n  async getBusDetail() {\r\n    fetch(this.state.url)\r\n      .then(function(response) {\r\n        return response.json();\r\n      })\r\n      .then(\r\n        function(myJson) {\r\n          // console.log(myJson);\r\n          filterBusObj = myJson.filter(obj =>\r\n            obj.StopName.Zh_tw.includes(filterText)\r\n          );\r\n          this.setState({\r\n            busData: filterBusObj,\r\n            seconds: 5\r\n          });\r\n          // console.log(myJson);\r\n        }.bind(this)\r\n      );\r\n  }\r\n  // component被mount在畫面上後執行\r\n  componentDidMount() {\r\n    setInterval(() => {\r\n      this.countDown();\r\n    }, 1000);\r\n    this.getBusDetail();\r\n  }\r\n  // upudate之後才執行\r\n  componentDidUpdate() {\r\n    // console.log(this.state.busData);\r\n  }\r\n  handleSearchText = e => {\r\n    filterText = e.target.value;\r\n    if (!isSearching) {\r\n      isSearching = true;\r\n      reserveBusData = [...this.state.busData];\r\n    }\r\n    if (isSearching && filterText === \"\") {\r\n      isSearching = false;\r\n      this.setState({\r\n        busData: reserveBusData\r\n      });\r\n    } else {\r\n      filterBusObj = reserveBusData.filter(obj =>\r\n        obj.StopName.Zh_tw.includes(filterText)\r\n      );\r\n      this.setState({\r\n        busData: filterBusObj\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <BusList\r\n        busData={this.state.busData}\r\n        seconds={this.state.seconds}\r\n        handleSearchText={this.handleSearchText}\r\n        getBusDetail={this.getBusDetail.bind(this)}\r\n      />\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}